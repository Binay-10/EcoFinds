import React, { useState, useEffect, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, signInAnonymously } from 'firebase/auth';
import { getFirestore, collection, addDoc, getDocs, doc, getDoc, onSnapshot, query, where, setDoc, deleteDoc } from 'firebase/firestore';

const App = () => {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [page, setPage] = useState('home');
  const [ads, setAds] = useState([]);
  const [userListings, setUserListings] = useState([]);
  const [watchlist, setWatchlist] = useState([]);
  const [selectedAd, setSelectedAd] = useState(null);
  const [newAd, setNewAd] = useState({ title: '', description: '', price: '', imageUrl: '', category: '' });
  const [showModal, setShowModal] = useState(false);
  const [modalMessage, setModalMessage] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isCategorizing, setIsCategorizing] = useState(false);
  const [profileForm, setProfileForm] = useState({
    displayName: '',
    email: '',
    phoneNumber: '',
    dob: '',
    address: '',
  });
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [phoneNumberError, setPhoneNumberError] = useState(false);
  const [currentReview, setCurrentReview] = useState(null);

  // Global variables provided by the Canvas environment
  const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
  const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
  const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

  const categories = ['all', 'kitchen use', 'home decor', 'clothing', 'automobile', 'electronics', 'furniture', 'books', 'vehicles', 'other'];
  const aiCategories = ['kitchen use', 'home decor', 'clothing', 'automobile', 'electronics', 'furniture', 'books', 'vehicles', 'other'];
  
  const reviews = [
    { name: 'Priya Sharma', text: 'Great product! Exactly as described and the seller was very responsive.' },
    { name: 'Rajesh Kumar', text: 'Excellent condition. A must-buy for anyone looking for this kind of item.' },
    { name: 'Anjali Singh', text: 'Very happy with the purchase. The item arrived quickly and safely.' },
    { name: 'Arjun Reddy', text: 'Fantastic value for money. The quality exceeded my expectations.' },
    { name: 'Sana Khan', text: 'Smooth transaction and the product is amazing. Highly recommend!' },
    { name: 'Vikram Patel', text: 'This is a game-changer! I’m so glad I found this listing.' },
    { name: 'Kavita Iyer', text: 'Absolutely perfect. The seller was friendly and the item is in pristine condition.' },
    { name: 'Mohit Das', text: 'A great find! The product is exactly what I was looking for.' },
  ];

  // --- Firebase Initialization and Auth ---
  useEffect(() => {
    try {
      const app = initializeApp(firebaseConfig);
      const firestore = getFirestore(app);
      const firebaseAuth = getAuth(app);
      setDb(firestore);
      setAuth(firebaseAuth);

      const unsubscribe = firebaseAuth.onAuthStateChanged(async (user) => {
        if (user) {
          setUserId(user.uid);
        } else {
          try {
            await (initialAuthToken
              ? signInWithCustomToken(firebaseAuth, initialAuthToken)
              : signInAnonymously(firebaseAuth)
            );
          } catch (e) {
            console.error("Authentication failed:", e);
          }
        }
        setIsAuthReady(true);
      });

      return () => unsubscribe();
    } catch (e) {
      console.error("Firebase initialization failed:", e);
    }
  }, []);

  // --- Data Fetching ---
  useEffect(() => {
    if (!db || !isAuthReady) return;

    const adsCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'ads');
    // Fetch all ads
    const unsubscribeAds = onSnapshot(adsCollectionRef, (snapshot) => {
      const adsList = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setAds(adsList);
    });

    // Fetch user profile and set initial page
    let unsubscribeProfile = () => {};
    let unsubscribeUserListings = () => {};
    let unsubscribeWatchlist = () => {};

    if (userId) {
      const profileDocRef = doc(db, 'artifacts', appId, 'users', userId, 'profiles', 'public');
      unsubscribeProfile = onSnapshot(profileDocRef, (docSnap) => {
        if (docSnap.exists()) {
          const profileData = docSnap.data();
          setUserProfile(profileData);
          setPage('home'); // Go to home page if profile exists
          
          // These queries depend on userProfile, so we set them up here.
          // Fetch user-specific listings
          const userListingsQuery = query(adsCollectionRef, where("postedBy", "==", profileData.displayName));
          unsubscribeUserListings = onSnapshot(userListingsQuery, (snapshot) => {
            const listings = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setUserListings(listings);
          });
          
          // Fetch user's watchlist
          const watchlistCollectionRef = collection(db, 'artifacts', appId, 'users', userId, 'watchlist');
          unsubscribeWatchlist = onSnapshot(watchlistCollectionRef, (snapshot) => {
            const watchedItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setWatchlist(watchedItems);
          });
          
        } else {
          setUserProfile(null);
          setPage('profileSetup'); // Go to profile setup if no profile exists
        }
      });
    }

    return () => {
      unsubscribeAds();
      unsubscribeProfile();
      unsubscribeUserListings();
      unsubscribeWatchlist();
    };
  }, [db, isAuthReady, appId, userId]);

  const showMessageBox = (message) => {
    setModalMessage(message);
    setShowModal(true);
    setTimeout(() => {
      setShowModal(false);
      setModalMessage('');
    }, 3000);
  };

  const generateDescription = async () => {
    if (!newAd.title) {
      showMessageBox('Please provide a title to generate a description.');
      return;
    }
    setIsGenerating(true);
    
    const systemPrompt = `You are a creative copywriter for a classifieds app called EcoFinds. Generate a detailed and appealing product description for a classifieds ad. The description should be about 100-150 words.`;
    const userQuery = `Generate a detailed and creative product description for an item with the title "${newAd.title}". Make it sound appealing and highlight its key features.`;
    const apiKey = "";
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

    const payload = {
      contents: [{ parts: [{ text: userQuery }] }],
      tools: [{ "google_search": {} }],
      systemInstruction: { parts: [{ text: systemPrompt }] },
    };

    const fetchWithRetry = async (url, options, retries = 3) => {
      try {
        const response = await fetch(url, options);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return await response.json();
      } catch (error) {
        if (retries > 0) {
          await new Promise(res => setTimeout(res, 2 ** (3 - retries) * 1000));
          return fetchWithRetry(url, options, retries - 1);
        }
        throw error;
      }
    };

    try {
      const response = await fetchWithRetry(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      
      const generatedText = response.candidates?.[0]?.content?.parts?.[0]?.text;
      if (generatedText) {
        setNewAd(prev => ({ ...prev, description: generatedText }));
      } else {
        showMessageBox('Could not generate description. Please try again.');
      }
    } catch (error) {
      console.error('API call failed:', error);
      showMessageBox('Failed to generate description. Please check your network connection.');
    } finally {
      setIsGenerating(false);
    }
  };

  const categorizeWithAI = async (title, description) => {
      setIsCategorizing(true);
      const systemPrompt = `You are a product classifier for a classifieds app. Your task is to analyze a product title and description and assign it to one of the following categories: ${aiCategories.join(', ')}. Respond with ONLY the category name and nothing else. If the category is ambiguous, respond with 'other'.`;
      const userQuery = `Product Title: "${title}". Product Description: "${description}". What is the best category?`;
      const apiKey = "";
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

      const payload = {
        contents: [{ parts: [{ text: userQuery }] }],
        systemInstruction: { parts: [{ text: systemPrompt }] },
      };

      const fetchWithRetry = async (url, options, retries = 3) => {
          try {
              const response = await fetch(url, options);
              if (!response.ok) {
                  throw new Error(`HTTP error! status: ${response.status}`);
              }
              return await response.json();
          } catch (error) {
              if (retries > 0) {
                  await new Promise(res => setTimeout(res, 2 ** (3 - retries) * 1000));
                  return fetchWithRetry(url, options, retries - 1);
              }
              throw error;
          }
      };

      try {
          const response = await fetchWithRetry(apiUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
          });

          const predictedCategory = response.candidates?.[0]?.content?.parts?.[0]?.text.trim().toLowerCase();
          setIsCategorizing(false);
          if (aiCategories.includes(predictedCategory)) {
              return predictedCategory;
          }
          return 'other';
      } catch (error) {
          console.error('API call failed:', error);
          setIsCategorizing(false);
          showMessageBox('Failed to categorize. Defaulting to "other".');
          return 'other';
      }
  };


  const handleProfileSetup = async (e) => {
    e.preventDefault();
    setPhoneNumberError(false);

    if (!profileForm.displayName || !userId) {
      showMessageBox('Please enter a display name.');
      return;
    }
    
    if (profileForm.phoneNumber && profileForm.phoneNumber.length !== 10) {
      setPhoneNumberError(true);
      return;
    }

    const dob = new Date(profileForm.dob);
    const today = new Date();
    let age = today.getFullYear() - dob.getFullYear();
    const monthDiff = today.getMonth() - dob.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
      age--;
    }

    if (age < 18) {
      showMessageBox('You must be 18 or older to create a profile.');
      return;
    }
    
    try {
      const profileDocRef = doc(db, 'artifacts', appId, 'users', userId, 'profiles', 'public');
      await setDoc(profileDocRef, { 
        displayName: profileForm.displayName,
        email: profileForm.email,
        phoneNumber: profileForm.phoneNumber,
        dob: profileForm.dob,
        address: profileForm.address,
      });
      showMessageBox('Profile created successfully!');
      setPage('home');
    } catch (e) {
      console.error('Error creating profile:', e);
      showMessageBox('Failed to create profile.');
    }
  };

  const handleDeleteProfile = () => {
    setShowDeleteModal(true);
  };

  const handleConfirmDeleteProfile = async () => {
    if (!userId) {
      showMessageBox('No profile to delete.');
      return;
    }
    setIsDeleting(true);
    setShowDeleteModal(false);

    try {
      // Delete user's public listings
      const adsCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'ads');
      const userListingsQuery = query(adsCollectionRef, where("postedBy", "==", userProfile.displayName));
      const userListingsSnapshot = await getDocs(userListingsQuery);
      userListingsSnapshot.forEach(async (d) => {
        await deleteDoc(doc(db, 'artifacts', appId, 'public', 'data', 'ads', d.id));
      });

      // Delete user's private watchlist
      const watchlistCollectionRef = collection(db, 'artifacts', appId, 'users', userId, 'watchlist');
      const watchlistSnapshot = await getDocs(watchlistCollectionRef);
      watchlistSnapshot.forEach(async (d) => {
        await deleteDoc(doc(db, 'artifacts', appId, 'users', userId, 'watchlist', d.id));
      });

      // Delete the user's profile
      const profileDocRef = doc(db, 'artifacts', appId, 'users', userId, 'profiles', 'public');
      await deleteDoc(profileDocRef);

      showMessageBox('Profile and all associated data deleted successfully.');
      setProfileForm({ displayName: '', email: '', phoneNumber: '', dob: '', address: '' });
      setPage('profileSetup');
    } catch (e) {
      console.error('Error deleting profile:', e);
      showMessageBox('Failed to delete profile. Please try again.');
    } finally {
      setIsDeleting(false);
    }
  };

  const handlePostAd = async (e) => {
    e.preventDefault();
    if (!newAd.title || !newAd.price || !newAd.imageUrl || !userId) {
      showMessageBox('Please fill out all required fields.');
      return;
    }
    
    // Categorize with AI before posting
    const categorizedAd = { ...newAd, category: 'other' };
    const predictedCategory = await categorizeWithAI(newAd.title, newAd.description);
    categorizedAd.category = predictedCategory;

    try {
      const adsCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'ads');
      await addDoc(adsCollectionRef, {
        ...categorizedAd,
        price: parseFloat(categorizedAd.price),
        postedBy: userProfile.displayName,
        createdAt: new Date()
      });
      showMessageBox('Ad posted successfully!');
      setNewAd({ title: '', description: '', price: '', imageUrl: '', category: '' });
      setPage('dashboard');
    } catch (e) {
      console.error('Error adding document:', e);
      showMessageBox('Failed to post ad.');
    }
  };

  const handleDeleteAd = async (adId) => {
    try {
      const adDocRef = doc(db, 'artifacts', appId, 'public', 'data', 'ads', adId);
      await deleteDoc(adDocRef);
      showMessageBox('Ad deleted successfully!');
      setPage('dashboard');
    } catch (e) {
      console.error('Error deleting document:', e);
      showMessageBox('Failed to delete ad.');
    }
  };

  const handleSaveToWatchlist = async (ad) => {
    if (!userId) {
      showMessageBox('Please log in to save items to your watchlist.');
      return;
    }
    try {
      const watchlistDocRef = doc(db, 'artifacts', appId, 'users', userId, 'watchlist', ad.id);
      await setDoc(watchlistDocRef, ad);
      showMessageBox('Item added to watchlist!');
    } catch (e) {
      console.error('Error adding to watchlist:', e);
      showMessageBox('Failed to add to watchlist.');
    }
  };

  const handleRemoveFromWatchlist = async (adId) => {
    try {
      const watchlistDocRef = doc(db, 'artifacts', appId, 'users', userId, 'watchlist', adId);
      await deleteDoc(watchlistDocRef);
      showMessageBox('Item removed from watchlist.');
    } catch (e) {
      console.error('Error removing from watchlist:', e);
      showMessageBox('Failed to remove from watchlist.');
    }
  };

  const handleBuyNow = () => {
    showMessageBox('Thank you for your purchase! The seller has been notified.');
  };

  const handlePageChange = (newPage) => {
    setPage(newPage);
    setSelectedAd(null);
    if (newPage === 'view') {
        const randomIndex = Math.floor(Math.random() * reviews.length);
        setCurrentReview(reviews[randomIndex]);
    }
  };

  const filteredAds = ads.filter(ad => {
    const matchesCategory = selectedCategory === 'all' || ad.category === selectedCategory;
    const matchesSearch = ad.title.toLowerCase().includes(searchTerm.toLowerCase()) || ad.description.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const renderNav = () => (
    <nav className="bg-white shadow-sm sticky top-0 z-10">
      <div className="container mx-auto px-4 py-4 flex flex-col sm:flex-row justify-between items-center">
        <div className="flex items-center mb-4 sm:mb-0">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-green-600 mr-2 animate-leaf-pulse" fill="currentColor" viewBox="0 0 24 24">
            <path d="M16.891 7.233c-1.396-1.396-3.664-1.396-5.06 0l-5.632 5.632c-1.396 1.396-1.396 3.664 0 5.06s3.664 1.396 5.06 0l5.632-5.632c1.396-1.396 1.396-3.664 0-5.06zm-6.848 6.848l-3.39-3.39c-.93-.93-.93-2.441 0-3.371s2.441-.93 3.371 0l3.39 3.39c.93.93.93 2.441 0 3.371s-2.441.93-3.371 0zm7.155-7.155l-5.632-5.632c-1.396-1.396-3.664-1.396-5.06 0l-5.632 5.632c-1.396 1.396-1.396 3.664 0 5.06l12.424 12.424c.731.731 1.691 1.096 2.651 1.096s1.92-.365 2.651-1.096c1.396-1.396 1.396-3.664 0-5.06l-5.632-5.632c-1.396-1.396-3.664-1.396-5.06 0z"/>
          </svg>
          <span className="text-2xl font-bold text-gray-900">EcoFinds</span>
        </div>
        <div className="flex flex-wrap justify-center sm:justify-end items-center space-x-2 sm:space-x-4">
          <button onClick={() => handlePageChange('home')} className="nav-btn">Home</button>
          <button onClick={() => handlePageChange('dashboard')} className="nav-btn">Dashboard</button>
          <button onClick={() => handlePageChange('watchlist')} className="nav-btn">Watchlist</button>
          <button onClick={() => handlePageChange('post')} className="nav-btn bg-green-600 text-white hover:bg-green-700">Post</button>
        </div>
      </div>
    </nav>
  );

  const renderHomePage = () => (
    <div className="p-4 sm:p-6 md:p-8 bg-gray-100 min-h-screen">
      <div className="flex flex-col sm:flex-row justify-between items-center mb-6 space-y-4 sm:space-y-0">
        <h1 className="text-3xl font-bold text-gray-800">All Listings</h1>
        <div className="flex flex-col sm:flex-row sm:space-x-4 w-full sm:w-auto space-y-4 sm:space-y-0">
          <input
            type="text"
            placeholder="Search by keyword..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full sm:w-64 rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          />
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          >
            {categories.map(cat => (
              <option key={cat} value={cat}>{cat.charAt(0).toUpperCase() + cat.slice(1)}</option>
            ))}
          </select>
        </div>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {filteredAds.map(ad => (
          <div key={ad.id} onClick={() => { setSelectedAd(ad); setPage('view'); }} className="bg-white rounded-lg shadow-md hover:shadow-xl transition-all duration-300 ease-in-out cursor-pointer overflow-hidden transform hover:-translate-y-1">
            <img src={ad.imageUrl} alt={ad.title} className="w-full h-48 object-cover object-center" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/400x300/E5E7EB/4B5563?text=Image+Not+Found"; }} />
            <div className="p-4">
              <span className="inline-block bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full mb-2">{ad.category.charAt(0).toUpperCase() + ad.category.slice(1)}</span>
              <h2 className="text-xl font-semibold text-gray-900 truncate">{ad.title}</h2>
              <p className="mt-2 text-2xl font-bold text-green-600">₹{ad.price}</p>
              <p className="text-sm text-gray-500 mt-1">Posted by: {ad.postedBy}</p>
            </div>
          </div>
        ))}
        {filteredAds.length === 0 && (
          <p className="text-center text-gray-500 col-span-full">No listings found matching your criteria.</p>
        )}
      </div>
    </div>
  );

  const renderPostAdPage = () => (
    <div className="p-4 sm:p-6 md:p-8 bg-gray-100 min-h-screen flex flex-col items-center">
      <div className="w-full max-w-lg bg-white p-6 sm:p-8 rounded-lg shadow-xl">
        <h1 className="text-2xl font-bold text-gray-800 mb-6 text-center">Post a New Ad</h1>
        <form onSubmit={handlePostAd} className="space-y-4">
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
            <input type="text" id="title" value={newAd.title} onChange={(e) => setNewAd({ ...newAd, title: e.target.value })} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500" required />
          </div>
          <div>
            <div className="flex justify-between items-center mb-1">
              <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
              <button
                type="button"
                onClick={generateDescription}
                disabled={isGenerating}
                className={`py-1 px-3 text-xs rounded-full font-medium transition-colors ${
                  isGenerating ? 'bg-gray-200 text-gray-500 cursor-not-allowed' : 'bg-green-500 text-white hover:bg-green-600'
                }`}
              >
                {isGenerating ? 'Generating...' : 'Generate with AI'}
              </button>
            </div>
            <textarea id="description" value={newAd.description} onChange={(e) => setNewAd({ ...newAd, description: e.target.value })} rows="4" className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"></textarea>
          </div>
          <div>
            <label htmlFor="price" className="block text-sm font-medium text-gray-700">Price (₹)</label>
            <input type="number" id="price" value={newAd.price} onChange={(e) => setNewAd({ ...newAd, price: e.target.value })} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500" required />
          </div>
          <div>
            <div className="text-sm font-medium text-gray-700">Category</div>
            <div className="mt-1 p-2 bg-gray-100 rounded-md text-sm text-gray-500">
              {isCategorizing ? 'Determining category with AI...' : (newAd.category ? `Category will be set to: ${newAd.category}` : 'Category will be auto-generated upon posting.')}
            </div>
          </div>
          <div>
            <label htmlFor="imageUrl" className="block text-sm font-medium text-gray-700">Enter Image URL</label>
            <input type="text" id="imageUrl" value={newAd.imageUrl} onChange={(e) => setNewAd({ ...newAd, imageUrl: e.target.value })} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500" required />
          </div>
          <div className="flex justify-between items-center">
            <button type="button" onClick={() => handlePageChange('home')} className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-gray-700 bg-gray-200 hover:bg-gray-300 focus:outline-none transition-all duration-200">
              Cancel
            </button>
            <button type="submit" className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none transition-all duration-200">
              Post Ad
            </button>
          </div>
        </form>
      </div>
    </div>
  );

  const renderViewAdPage = () => (
    <div className="p-4 sm:p-6 md:p-8 bg-gray-100 min-h-screen flex justify-center items-start">
      <div className="w-full max-w-4xl bg-white rounded-lg shadow-xl overflow-hidden">
        <div className="relative">
          <img src={selectedAd.imageUrl} alt={selectedAd.title} className="w-full h-80 object-cover" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/800x600/E5E7EB/4B5563?text=Image+Not+Found"; }} />
          <button onClick={() => handlePageChange('home')} className="absolute top-4 left-4 bg-gray-800 bg-opacity-50 hover:bg-opacity-75 text-white p-2 rounded-full transition-all duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" /></svg>
          </button>
        </div>
        <div className="p-6">
          <span className="inline-block bg-green-100 text-green-800 text-sm font-medium px-3 py-1 rounded-full mb-2">{selectedAd.category.charAt(0).toUpperCase() + selectedAd.category.slice(1)}</span>
          <h1 className="text-3xl font-bold text-gray-900">{selectedAd.title}</h1>
          <p className="text-4xl font-extrabold text-green-600 my-4">₹{selectedAd.price}</p>
          <p className="text-gray-700 leading-relaxed mb-6">{selectedAd.description}</p>
          
          <div className="mt-8 p-4 bg-gray-100 rounded-lg">
            <h3 className="font-semibold text-lg text-gray-800 mb-2">Customer Review</h3>
            {currentReview && (
              <blockquote className="italic text-gray-600">
                "{currentReview.text}"
                <cite className="block mt-2 text-sm not-italic font-semibold text-gray-700">- {currentReview.name}</cite>
              </blockquote>
            )}
          </div>
          
          <div className="flex justify-between items-center text-sm text-gray-500 mt-6">
            <span>Posted By: <span className="font-semibold text-gray-800">{selectedAd.postedBy}</span></span>
            <div className="flex space-x-4">
              <button onClick={handleBuyNow} className="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-md transition duration-200 ease-in-out">
                Buy Now
              </button>
              <button onClick={() => handleSaveToWatchlist(selectedAd)} className="bg-yellow-400 hover:bg-yellow-500 text-gray-800 font-semibold py-2 px-4 rounded-md transition duration-200 ease-in-out">
                Add to Watchlist
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
  
  const renderUserDashboardPage = () => (
    <div className="p-4 sm:p-6 md:p-8 bg-gray-100 min-h-screen">
      <h1 className="text-3xl font-bold text-gray-800 mb-6">User Dashboard</h1>
      <div className="bg-white p-6 rounded-lg shadow-md mb-8">
        <h2 className="text-xl font-semibold text-gray-800 mb-2">User Profile</h2>
        {userProfile && (
          <div className="space-y-2 text-sm text-gray-600">
            <p>Display Name: <span className="font-semibold text-gray-800">{userProfile.displayName}</span></p>
            {userProfile.email && <p>Email: <span className="font-semibold text-gray-800">{userProfile.email}</span></p>}
            {userProfile.phoneNumber && <p>Phone Number: <span className="font-semibold text-gray-800">{userProfile.phoneNumber}</span></p>}
            {userProfile.dob && <p>Date of Birth: <span className="font-semibold text-gray-800">{userProfile.dob}</span></p>}
            {userProfile.address && <p>Address: <span className="font-semibold text-gray-800">{userProfile.address}</span></p>}
            <button onClick={handleDeleteProfile} className="mt-4 w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none transition-all duration-200">
              Delete This Profile
            </button>
          </div>
        )}
      </div>

      <div className="mb-8">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">Your Listings</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {userListings.map(ad => (
            <div key={ad.id} className="bg-white rounded-lg shadow-md overflow-hidden">
              <img src={ad.imageUrl} alt={ad.title} className="w-full h-48 object-cover" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/400x300/E5E7EB/4B5563?text=Image+Not+Found"; }} />
              <div className="p-4">
                <h3 className="text-lg font-semibold text-gray-900">{ad.title}</h3>
                <p className="text-xl font-bold text-green-600 my-1">₹{ad.price}</p>
                <div className="flex justify-between mt-2">
                  <button onClick={() => handleDeleteAd(ad.id)} className="bg-red-500 hover:bg-red-600 text-white text-sm font-semibold py-1.5 px-4 rounded-md transition-colors">
                    Delete
                  </button>
                </div>
              </div>
            </div>
          ))}
          {userListings.length === 0 && (
            <p className="text-center text-gray-500 col-span-full">You have not posted any listings yet.</p>
          )}
        </div>
      </div>
    </div>
  );

  const renderWatchlistPage = () => (
    <div className="p-4 sm:p-6 md:p-8 bg-gray-100 min-h-screen">
      <h1 className="text-3xl font-bold text-gray-800 mb-6">Your Watchlist</h1>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {watchlist.map(ad => (
          <div key={ad.id} className="bg-white rounded-lg shadow-md overflow-hidden">
            <img src={ad.imageUrl} alt={ad.title} className="w-full h-48 object-cover" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/400x300/E5E7EB/4B5563?text=Image+Not+Found"; }} />
            <div className="p-4">
              <h3 className="text-lg font-semibold text-gray-900">{ad.title}</h3>
              <p className="text-xl font-bold text-green-600 my-1">₹{ad.price}</p>
              <div className="flex justify-between mt-2">
                <button onClick={() => { setSelectedAd(ad); setPage('view'); }} className="bg-gray-200 hover:bg-gray-300 text-gray-800 text-sm font-semibold py-1.5 px-4 rounded-md transition-colors">
                  View
                </button>
                <button onClick={() => handleRemoveFromWatchlist(ad.id)} className="bg-red-500 hover:bg-red-600 text-white text-sm font-semibold py-1.5 px-4 rounded-md transition-colors">
                  Remove
                </button>
              </div>
            </div>
          </div>
        ))}
        {watchlist.length === 0 && (
          <p className="text-center text-gray-500 col-span-full">Your watchlist is empty.</p>
        )}
      </div>
    </div>
  );

  const renderProfileSetupPage = () => (
    <div className="p-4 sm:p-6 md:p-8 bg-gray-100 min-h-screen flex items-center justify-center">
      <div className="w-full max-w-sm bg-white p-6 sm:p-8 rounded-lg shadow-xl text-center">
        <h1 className="text-2xl font-bold text-gray-800 mb-4">Welcome to EcoFinds!</h1>
        <p className="text-sm text-gray-600 mb-6">Please enter your details to get started.</p>
        <form onSubmit={handleProfileSetup} className="space-y-4 text-left">
          <div>
            <label htmlFor="displayName" className="block text-sm font-medium text-gray-700">Display Name</label>
            <input 
              type="text" 
              id="displayName" 
              value={profileForm.displayName} 
              onChange={(e) => setProfileForm({...profileForm, displayName: e.target.value})} 
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500" 
              placeholder="Enter your name" 
              required 
            />
          </div>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
            <input 
              type="email" 
              id="email" 
              value={profileForm.email} 
              onChange={(e) => setProfileForm({...profileForm, email: e.target.value})} 
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500" 
              placeholder="Enter your email" 
            />
          </div>
          <div>
            <label htmlFor="phoneNumber" className="block text-sm font-medium text-gray-700">Phone Number</label>
            <input 
              type="tel" 
              id="phoneNumber" 
              value={profileForm.phoneNumber} 
              onChange={(e) => {
                  const value = e.target.value;
                  if (value.length <= 10) {
                      setProfileForm({...profileForm, phoneNumber: value});
                      setPhoneNumberError(value.length !== 10 && value.length !== 0);
                  }
              }} 
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500" 
              placeholder="Enter your phone number" 
            />
            {phoneNumberError && (
              <p className="text-sm text-red-500 mt-1">Invalid: phone number must be 10 digits.</p>
            )}
          </div>
          <div>
            <label htmlFor="dob" className="block text-sm font-medium text-gray-700">Date of Birth</label>
            <input 
              type="date" 
              id="dob" 
              value={profileForm.dob} 
              onChange={(e) => setProfileForm({...profileForm, dob: e.target.value})} 
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500" 
              required
            />
          </div>
          <div>
            <label htmlFor="address" className="block text-sm font-medium text-gray-700">Address</label>
            <textarea 
              id="address" 
              value={profileForm.address} 
              onChange={(e) => setProfileForm({...profileForm, address: e.target.value})} 
              rows="3"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500" 
              placeholder="Enter your full address" 
            />
            <p className="text-sm text-gray-500 mt-1">Above 18+</p>
          </div>
          <button type="submit" className="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none transition-all duration-200">
            Continue
          </button>
        </form>
      </div>
    </div>
  );

  const renderModal = () => (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-xl max-w-sm w-full text-center">
        <p className="text-lg font-medium text-gray-800">{modalMessage}</p>
      </div>
    </div>
  );

  const renderDeleteConfirmModal = () => (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-xl max-w-sm w-full text-center">
        <p className="text-lg font-medium text-gray-800 mb-4">Are you sure you want to delete your profile?</p>
        <p className="text-sm text-gray-600 mb-6">This action is permanent and will remove all your profile data, listings, and watchlist items.</p>
        <div className="flex justify-between space-x-4">
          <button onClick={() => setShowDeleteModal(false)} className="w-full inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-100 focus:outline-none transition-all duration-200">
            Cancel
          </button>
          <button onClick={handleConfirmDeleteProfile} disabled={isDeleting} className={`w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none transition-all duration-200 ${isDeleting ? 'cursor-not-allowed opacity-50' : ''}`}>
            {isDeleting ? 'Deleting...' : 'Delete Profile'}
          </button>
        </div>
      </div>
    </div>
  );

  const renderContent = () => {
    if (!isAuthReady) {
      return (
        <div className="flex items-center justify-center min-h-screen bg-gray-100">
          <p className="text-lg text-gray-600 animate-pulse">Loading...</p>
        </div>
      );
    }
    
    if (page === 'profileSetup') {
      return renderProfileSetupPage();
    } else if (page === 'home') {
      return renderHomePage();
    } else if (page === 'post') {
      return renderPostAdPage();
    } else if (page === 'view' && selectedAd) {
      return renderViewAdPage();
    } else if (page === 'dashboard') {
      return renderUserDashboardPage();
    } else if (page === 'watchlist') {
      return renderWatchlistPage();
    }
  };
  
  const renderFallingLeaves = () => {
    const leaves = [];
    const leafEmojis = ['🌿', '🍃', '🍀'];
    const numLeaves = 20;

    for (let i = 0; i < numLeaves; i++) {
      const style = {
        left: `${Math.random() * 100}vw`,
        animationDelay: `${Math.random() * 10}s`,
        animationDuration: `${Math.random() * 8 + 5}s`,
        fontSize: `${Math.random() * 1.5 + 1}rem`,
        opacity: Math.random() * 0.7 + 0.3,
      };
      leaves.push(
        <div key={i} className="falling-leaf" style={style}>
          {leafEmojis[Math.floor(Math.random() * leafEmojis.length)]}
        </div>
      );
    }

    return (
      <div className="leaf-container">{leaves}</div>
    );
  };

  return (
    <div className="font-sans antialiased text-gray-900 bg-gray-100 relative">
      <style>
        {`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
          font-family: 'Inter', sans-serif;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .text-shadow {
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }
        @keyframes leaf-pulse {
          0%, 100% { transform: scale(1) rotate(0deg); }
          50% { transform: scale(1.1) rotate(5deg); }
        }
        .animate-leaf-pulse {
          animation: leaf-pulse 2.5s infinite ease-in-out;
        }
        .nav-btn {
          font-weight: 500;
          color: #4B5563; /* gray-600 */
          padding: 0.5rem 1rem;
          border-radius: 0.375rem;
          transition: background-color 0.2s, color 0.2s, transform 0.2s;
        }
        .nav-btn:hover {
          background-color: #F3F4F6; /* gray-100 */
          transform: translateY(-1px);
        }
        .nav-btn.bg-green-600 {
          background-color: #059669;
        }
        .leaf-container {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          overflow: hidden;
          pointer-events: none;
          z-index: 0;
        }
        .falling-leaf {
          position: absolute;
          top: -5%;
          animation: falling linear infinite;
        }
        @keyframes falling {
          0% {
            transform: translateY(0) rotate(0deg);
            opacity: 1;
          }
          100% {
            transform: translateY(105vh) rotate(360deg);
            opacity: 0.5;
          }
        }
        .leafy-border-texture {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3E%3Cpath d='M10 0 C 15 0, 15 10, 10 15 C 5 10, 5 0, 10 0 Z' fill='%2381C784' opacity='0.5'/%3E%3C/svg%3E");
            background-repeat: repeat;
            background-size: 40px;
            -webkit-mask-image: radial-gradient(circle at center, transparent 70%, black 100%);
            mask-image: radial-gradient(circle at center, transparent 70%, black 100%);
        }
        `}
      </style>
      <script src="https://cdn.tailwindcss.com"></script>

      {/* Background border texture */}
      <div className="leafy-border-texture"></div>

      {/* Falling leaves background */}
      {renderFallingLeaves()}

      {showModal && renderModal()}
      {showDeleteModal && renderDeleteConfirmModal()}
      
      {page !== 'profileSetup' && renderNav()}

      <main className="container mx-auto px-4 py-8 relative z-10">
        {renderContent()}
      </main>
    </div>
  );
};

export default App;
