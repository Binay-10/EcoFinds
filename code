import React, { useState, useEffect, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, signInAnonymously } from 'firebase/auth';
import { getFirestore, collection, addDoc, getDocs, doc, getDoc, onSnapshot, query, where, setDoc, deleteDoc } from 'firebase/firestore';

const App = () => {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [page, setPage] = useState('home');
  const [ads, setAds] = useState([]);
  const [userListings, setUserListings] = useState([]);
  const [watchlist, setWatchlist] = useState([]);
  const [selectedAd, setSelectedAd] = useState(null);
  const [newAd, setNewAd] = useState({ title: '', description: '', price: '', imageUrl: '', category: '' });
  const [showModal, setShowModal] = useState(false);
  const [modalMessage, setModalMessage] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isCategorizing, setIsCategorizing] = useState(false);
  const [profileForm, setProfileForm] = useState({
    displayName: '',
    email: '',
    phoneNumber: '',
    dob: '',
    address: '',
  });
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [phoneNumberError, setPhoneNumberError] = useState(false);
  const [currentReview, setCurrentReview] = useState(null);

  // Global variables provided by the Canvas environment
  const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
  const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
  const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

  const categories = ['all', 'kitchen use', 'home decor', 'clothing', 'automobile', 'electronics', 'furniture', 'books', 'vehicles', 'other'];
  const aiCategories = ['kitchen use', 'home decor', 'clothing', 'automobile', 'electronics', 'furniture', 'books', 'vehicles', 'other'];
  
  const reviews = [
    { name: 'Priya Sharma', text: 'Great product! Exactly as described and the seller was very responsive.' },
    { name: 'Rajesh Kumar', text: 'Excellent condition. A must-buy for anyone looking for this kind of item.' },
    { name: 'Anjali Singh', text: 'Very happy with the purchase. The item arrived quickly and safely.' },
    { name: 'Arjun Reddy', text: 'Fantastic value for money. The quality exceeded my expectations.' },
    { name: 'Sana Khan', text: 'Smooth transaction and the product is amazing. Highly recommend!' },
    { name: 'Vikram Patel', text: 'This is a game-changer! Iâ€™m so glad I found this listing.' },
    { name: 'Kavita Iyer', text: 'Absolutely perfect. The seller was friendly and the item is in pristine condition.' },
    { name: 'Mohit Das', text: 'A great find! The product is exactly what I was looking for.' },
  ];

  // --- Firebase Initialization and Auth ---
  useEffect(() => {
    try {
      const app = initializeApp(firebaseConfig);
      const firestore = getFirestore(app);
      const firebaseAuth = getAuth(app);
      setDb(firestore);
      setAuth(firebaseAuth);

      const unsubscribe = firebaseAuth.onAuthStateChanged(async (user) => {
        if (user) {
          setUserId(user.uid);
        } else {
          try {
            await (initialAuthToken
              ? signInWithCustomToken(firebaseAuth, initialAuthToken)
              : signInAnonymously(firebaseAuth)
            );
          } catch (e) {
            console.error("Authentication failed:", e);
          }
        }
        setIsAuthReady(true);
      });

      return () => unsubscribe();
    } catch (e) {
      console.error("Firebase initialization failed:", e);
    }
  }, []);

  // --- Data Fetching ---
  useEffect(() => {
    if (!db || !isAuthReady) return;

    const adsCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'ads');
    // Fetch all ads
    const unsubscribeAds = onSnapshot(adsCollectionRef, (snapshot) => {
      const adsList = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
      setAds(adsList);
    });

    // Fetch user profile and set initial page
    let unsubscribeProfile = () => {};
    let unsubscribeUserListings = () => {};
    let unsubscribeWatchlist = () => {};

    if (userId) {
      const profileDocRef = doc(db, 'artifacts', appId, 'users', userId, 'profiles', 'public');
      unsubscribeProfile = onSnapshot(profileDocRef, (docSnap) => {
        if (docSnap.exists()) {
          const profileData = docSnap.data();
          setUserProfile(profileData);
          setPage('home'); // Go to home page if profile exists
          
          // These queries depend on userProfile, so we set them up here.
          // Fetch user-specific listings
          const userListingsQuery = query(adsCollectionRef, where("postedBy", "==", profileData.displayName));
          unsubscribeUserListings = onSnapshot(userListingsQuery, (snapshot) => {
            const listings = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setUserListings(listings);
          });
          
          // Fetch user's watchlist
          const watchlistCollectionRef = collection(db, 'artifacts', appId, 'users', userId, 'watchlist');
          unsubscribeWatchlist = onSnapshot(watchlistCollectionRef, (snapshot) => {
            const watchedItems = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setWatchlist(watchedItems);
          });
          
        } else {
          setUserProfile(null);
          setPage('profileSetup'); // Go to profile setup if no profile exists
        }
      });
    }

    return () => {
      unsubscribeAds();
      unsubscribeProfile();
      unsubscribeUserListings();
      unsubscribeWatchlist();
    };
  }, [db, isAuthReady, appId, userId]);

  const showMessageBox = (message) => {
    setModalMessage(message);
    setShowModal(true);
    setTimeout(() => {
      setShowModal(false);
      setModalMessage('');
    }, 3000);
  };

  const generateDescription = async () => {
    if (!newAd.title) {
      showMessageBox('Please provide a title to generate a description.');
      return;
    }
    setIsGenerating(true);
    
    const systemPrompt = `You are a creative copywriter for a classifieds app called EcoFinds. Generate a detailed and appealing product description for a classifieds ad. The description should be about 100-150 words.`;
    const userQuery = `Generate a detailed and creative product description for an item with the title "${newAd.title}". Make it sound appealing and highlight its key features.`;
    const apiKey = "";
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

    const payload = {
      contents: [{ parts: [{ text: userQuery }] }],
      tools: [{ "google_search": {} }],
      systemInstruction: { parts: [{ text: systemPrompt }] },
    };

    const fetchWithRetry = async (url, options, retries = 3) => {
      try {
        const response = await fetch(url, options);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return await response.json();
      } catch (error) {
        if (retries > 0) {
          await new Promise(res => setTimeout(res, 2 ** (3 - retries) * 1000));
          return fetchWithRetry(url, options, retries - 1);
        }
        throw error;
      }
    };

    try {
      const response = await fetchWithRetry(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      
      const generatedText = response.candidates?.[0]?.content?.parts?.[0]?.text;
      if (generatedText) {
        setNewAd(prev => ({ ...prev, description: generatedText }));
      } else {
        showMessageBox('Could not generate description. Please try again.');
      }
    } catch (error) {
      console.error('API call failed:', error);
      showMessageBox('Failed to generate description. Please check your network connection.');
    } finally {
      setIsGenerating(false);
    }
  };

  const categorizeWithAI = async (title, description) => {
      setIsCategorizing(true);
      const systemPrompt = `You are a product classifier for a classifieds app. Your task is to analyze a product title and description and assign it to one of the following categories: ${aiCategories.join(', ')}. Respond with ONLY the category name and nothing else. If the category is ambiguous, respond with 'other'.`;
      const userQuery = `Product Title: "${title}". Product Description: "${description}". What is the best category?`;
      const apiKey = "";
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

      const payload = {
        contents: [{ parts: [{ text: userQuery }] }],
        systemInstruction: { parts: [{ text: systemPrompt }] },
      };

      const fetchWithRetry = async (url, options, retries = 3) => {
          try {
              const response = await fetch(url, options);
              if (!response.ok) {
                  throw new Error(`HTTP error! status: ${response.status}`);
              }
              return await response.json();
          } catch (error) {
              if (retries > 0) {
                  await new Promise(res => setTimeout(res, 2 ** (3 - retries) * 1000));
                  return fetchWithRetry(url, options, retries - 1);
              }
              throw error;
          }
      };

      try {
          const response = await fetchWithRetry(apiUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(payload)
          });

          const predictedCategory = response.candidates?.[0]?.content?.parts?.[0]?.text.trim().toLowerCase();
          setIsCategorizing(false);
          if (aiCategories.includes(predictedCategory)) {
              return predictedCategory;
          }
          return 'other';
      } catch (error) {
          console.error('API call failed:', error);
          setIsCategorizing(false);
          showMessageBox('Failed to categorize. Defaulting to "other".');
          return 'other';
      }
  };


  const handleProfileSetup = async (e) => {
    e.preventDefault();
    setPhoneNumberError(false);

    if (!profileForm.displayName || !userId) {
      showMessageBox('Please enter a display name.');
      return;
    }
    
    if (profileForm.phoneNumber && profileForm.phoneNumber.length !== 10) {
      setPhoneNumberError(true);
      return;
    }

    const dob = new Date(profileForm.dob);
    const today = new Date();
    let age = today.getFullYear() - dob.getFullYear();
    const monthDiff = today.getMonth() - dob.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
      age--;
    }

    if (age < 18) {
      showMessageBox('You must be 18 or older to create a profile.');
      return;
    }
    
    try {
      const profileDocRef = doc(db, 'artifacts', appId, 'users', userId, 'profiles', 'public');
      await setDoc(profileDocRef, { 
        displayName: profileForm.displayName,
        email: profileForm.email,
        phoneNumber: profileForm.phoneNumber,
        dob: profileForm.dob,
        address: profileForm.address,
      });
      showMessageBox('Profile created successfully!');
      setPage('home');
    } catch (e) {
      console.error('Error creating profile:', e);
      showMessageBox('Failed to create profile.');
    }
  };

  const handleDeleteProfile = () => {
    setShowDeleteModal(true);
  };

  const handleConfirmDeleteProfile = async () => {
    if (!userId) {
      showMessageBox('No profile to delete.');
      return;
    }
    setIsDeleting(true);
    setShowDeleteModal(false);

    try {
      // Delete user's public listings
      const adsCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'ads');
      const userListingsQuery = query(adsCollectionRef, where("postedBy", "==", userProfile.displayName));
      const userListingsSnapshot = await getDocs(userListingsQuery);
      userListingsSnapshot.forEach(async (d) => {
        await deleteDoc(doc(db, 'artifacts', appId, 'public', 'data', 'ads', d.id));
      });

      // Delete user's private watchlist
      const watchlistCollectionRef = collection(db, 'artifacts', appId, 'users', userId, 'watchlist');
      const watchlistSnapshot = await getDocs(watchlistCollectionRef);
      watchlistSnapshot.forEach(async (d) => {
        await deleteDoc(doc(db, 'artifacts', appId, 'users', userId, 'watchlist', d.id));
      });

      // Delete the user's profile
      const profileDocRef = doc(db, 'artifacts', appId, 'users', userId, 'profiles', 'public');
      await deleteDoc(profileDocRef);

      showMessageBox('Profile and all associated data deleted successfully.');
      setProfileForm({ displayName: '', email: '', phoneNumber: '', dob: '', address: '' });
      setPage('profileSetup');
    } catch (e) {
      console.error('Error deleting profile:', e);
      showMessageBox('Failed to delete profile. Please try again.');
    } finally {
      setIsDeleting(false);
    }
  };

  const handlePostAd = async (e) => {
    e.preventDefault();
    if (!newAd.title || !newAd.price || !newAd.imageUrl || !userId) {
      showMessageBox('Please fill out all required fields.');
      return;
    }
    
    // Categorize with AI before posting
    const categorizedAd = { ...newAd, category: 'other' };
    const predictedCategory = await categorizeWithAI(newAd.title, newAd.description);
    categorizedAd.category = predictedCategory;

    try {
      const adsCollectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'ads');
      await addDoc(adsCollectionRef, {
        ...categorizedAd,
        price: parseFloat(categorizedAd.price),
        postedBy: userProfile.displayName,
        createdAt: new Date()
      });
      showMessageBox('Ad posted successfully!');
      setNewAd({ title: '', description: '', price: '', imageUrl: '', category: '' });
      setPage('dashboard');
    } catch (e) {
      console.error('Error adding document:', e);
      showMessageBox('Failed to post ad.');
    }
  };

  const handleDeleteAd = async (adId) => {
    try {
      const adDocRef = doc(db, 'artifacts', appId, 'public', 'data', 'ads', adId);
      await deleteDoc(adDocRef);
      showMessageBox('Ad deleted successfully!');
      setPage('dashboard');
    } catch (e) {
      console.error('Error deleting document:', e);
      showMessageBox('Failed to delete ad.');
    }
  };

  const handleSaveToWatchlist = async (ad) => {
    if (!userId) {
      showMessageBox('Please log in to save items to your watchlist.');
      return;
    }
    try {
      const watchlistDocRef = doc(db, 'artifacts', appId, 'users', userId, 'watchlist', ad.id);
      await setDoc(watchlistDocRef, ad);
      showMessageBox('Item added to watchlist!');
    } catch (e) {
      console.error('Error adding to watchlist:', e);
      showMessageBox('Failed to add to watchlist.');
    }
  };

  const handleRemoveFromWatchlist = async (adId) => {
    try {
      const watchlistDocRef = doc(db, 'artifacts', appId, 'users', userId, 'watchlist', adId);
      await deleteDoc(watchlistDocRef);
      showMessageBox('Item removed from watchlist.');
    } catch (e) {
      console.error('Error removing from watchlist:', e);
      showMessageBox('Failed to remove from watchlist.');
    }
  };

  const handleBuyNow = () => {
    showMessageBox('Thank you for your purchase! The seller has been notified.');
  };

  const handlePageChange = (newPage) => {
    setPage(newPage);
    setSelectedAd(null);
    if (newPage === 'view') {
        const randomIndex = Math.floor(Math.random() * reviews.length);
        setCurrentReview(reviews[randomIndex]);
    }
  };

  const filteredAds = ads.filter(ad => {
    const matchesCategory = selectedCategory === 'all' || ad.category === selectedCategory;
    const matchesSearch = ad.title.toLowerCase().includes(searchTerm.toLowerCase()) || ad.description.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const renderNav = () => (
    <nav className="bg-white shadow-sm sticky top-0 z-10">
      <div className="container mx-auto px-4 py-4 flex flex-col sm:flex-row justify-between items-center">
        <div className="flex items-center mb-4 sm:mb-0">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-green-600 mr-2 animate-leaf-pulse" fill="currentColor" viewBox="0 0 24 24">
            <path d="M16.891 7.233c-1.396-1.396-3.664-1.396-5.06 0l-5.632 5.632c-1.396 1.396-1.396 3.664 0 5.06s3.664 1.396 5.06 0l5.632-5.632c1.396-1.396 1.396-3.664 0-5.06zm-6.848 6.848l-3.39-3.39c-.93-.93-.93-2.441 0-3.371s2.441-.93 3.371 0l3.39 3.39c.93.93.93 2.441 0 3.371s-2.441.93-3.371 0zm7.155-7.155l-5.632-5.632c-1.396-1.396-3.664-1.396-5.06 0l-5.632 5.632c-1.396 1.396-1.396 3.664 0 5.06l12.424 12.424c.731.731 1.691 1.096 2.651 1.096s1.92-.365 2.651-1.096c1.396-1.396 1.396-3.664 0-5.06l-5.632-5.632c-1.396-1.396-3.664-1.396-5.06 0z"/>
          </svg>
          <span className="text-2xl font-bold text-gray-900">EcoFinds</span>
        </div>
        <div className="flex flex-wrap justify-center sm:justify-end items-center space-x-2 sm:space-x-4">
          <button onClick={() => handlePageChange('home')} className="nav-btn">Home</button>
          <button onClick={() => handlePageChange('dashboard')} className="nav-btn">Dashboard</button>
          <button onClick={() => handlePageChange('watchlist')} className="nav-btn">Watchlist</button>
          <button onClick={() => handlePageChange('post')} className="nav-btn bg-green-600 text-white hover:bg-green-700">Post</button>
        </div>
      </div>
    </nav>
  );

  const renderHomePage = () => (
    <div className="p-4 sm:p-6 md:p-8 bg-gray-100 min-h-screen">
      <div className="flex flex-col sm:flex-row justify-between items-center mb-6 space-y-4 sm:space-y-0">
        <h1 className="text-3xl font-bold text-gray-800">All Listings</h1>
        <div className="flex flex-col sm:flex-row sm:space-x-4 w-full sm:w-auto space-y-4 sm:space-y-0">
          <input
            type="text"
            placeholder="Search by keyword..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full sm:w-64 rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          />
          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
          >
            {categories.map(cat => (
              <option key={cat} value={cat}>{cat.charAt(0).toUpperCase() + cat.slice(1)}</option>
            ))}
          </select>
        </div>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {filteredAds.map(ad => (
          <div key={ad.id} onClick={() => { setSelectedAd(ad); setPage('view'); }} className="bg-white rounded-lg shadow-md hover:shadow-xl transition-all duration-300 ease-in-out cursor-pointer overflow-hidden transform hover:-translate-y-1">
            <img src={ad.imageUrl} alt={ad.title} className="w-full h-48 object-cover object-center" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/400x300/E5E7EB/4B5563?text=Image+Not+Found"; }} />
            <div className="p-4">
              <span className="inline-block bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full mb-2">{ad.category.charAt(0).toUpperCase() + ad.category.slice(1)}</span>
              <h2 className="text-xl font-semibold text-gray-900 truncate">{ad.title}</h2>
              <p className="mt-2 text-2xl font-bold text-green-600">â‚¹{ad.price}</p>
              <p className="text-sm text-gray-500 mt-1">Posted by: {ad.postedBy}</p>
            </div>
          </div>
        ))}
        {filteredAds.length === 0 && (
          <p className="text-center text-gray-500 col-span-full">No listings found matching your criteria.</p>
        )}
      </div>
    </div>
  );

  const renderPostAdPage = () => (
    <div className="p-4 sm:p-6 md:p-8 bg-gray-100 min-h-screen flex flex-col items-center">
      <div className="w-full max-w-lg bg-white p-6 sm:p-8 rounded-lg shadow-xl">
        <h1 className="text-2xl font-bold text-gray-800 mb-6 text-center">Post a New Ad</h1>
        <form onSubmit={handlePostAd} className="space-y-4">
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
            <input type="text" id="title" value={newAd.title} onChange={(e) => setNewAd({ ...newAd, title: e.target.value })} className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500" required />
          </div>
         
